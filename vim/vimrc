set nocp  " we don't wanna be vi compatible.

" Vundle 
" -----------------
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'NLKNguyen/papercolor-theme'
Plugin 'gmarik/vundle'
Plugin 'rking/ag.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'xsbeats/vim-blade'
Plugin 'henrik/vim-reveal-in-finder'
Plugin 'junegunn/goyo.vim'
Plugin 'reedes/vim-pencil'
Plugin 'docunext/closetag.vim'
Plugin 'mattn/emmet-vim'
Plugin 'rust-lang/rust.vim'


let g:airline_theme = "powerlineish"
let g:airline_powerline_fonts = 0
let g:airline_symbols = {}

" unicode symbols
let g:airline_left_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'


" Aliases
" -----------------
" Set leader to ',' since its easier to type
let mapleader = ","

" shortcut to get out of insert mode.
imap jj <Esc>

" shortcut to toggle paste mode
set pastetoggle=<leader>p

" shortcuts for creating splits
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" shortcuts to switch between splits
nnoremap sh <C-w>h
nnoremap sl <C-w>l
nnoremap sj <C-w>j
nnoremap sk <C-w>k

" shortcut to hide search highlights
nmap <leader>h :nohlsearch<cr>

" Open NerdTree
map <D-1> :NERDTreeToggle %<CR>
map <D-2> :NERDTreeFind<CR>

" Quick file-switching via Ctrl-P
map <C-p> :CtrlP<cr>
map <C-t> :CtrlPBufTag<cr>


" Appearance & color scheme
" -------------------------
syntax enable
set background=dark
colorscheme PaperColor

" fix background display issue in tmux
set t_ut=

" use mouse in terminal vim
set mouse=a

" line numbers
set ruler " show line numbers
set relativenumber " relative line numbers
set number " shows current line as absolute line number (Vim 7.4+)
set cul " highlights current line

" open splits below/right of current area, like a sane person
set splitbelow
set splitright

" keep 5 lines above/below the cursor when scrolling
set scrolloff=5

" don't be annoying
set noerrorbells
set novisualbell

" show powerline all the time
set laststatus=2

" gui options
set guifont=Menlo:h12
set guioptions-=m
set guioptions-=t
set guioptions-=r

" hide splash screen
set shortmess+=I

" Code Completion
" ---------------
set omnifunc=syntaxcomplete#Complete

let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

" UltiSnips
let g:UltiSnipsExpandTrigger="<C-S>"
let g:UltiSnipsJumpForwardTrigger="<C-S>"
let g:UltiSnipsJumpBackwardTrigger="<C-D>"


" Ctrl-P
" ------

" Use The Silver Searcher if installed
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" ignores for ctrl-p
set wildignore+=*/tmp/*,*/vendor/*,*/dist/*,*/node_modules/*,*/html/*,*/.sass_cache/*,*.so,*.swp,*.zip     " Linux/MacOSX


" Delimitmate
" -----------

" let delimitmate expand carriage returns with correct indentation
let delimitMate_expand_cr=1


" Opening/closing files
" ---------------------

" Remember last location in file (except git commit prompt)
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
   \| exe "normal! g`\"" | endif

" automatically read a file that has changed on disk
set autoread


" Filetypes & syntax highlighting
" ----------------------------------
syntax on
filetype off
filetype indent on
filetype plugin on
set encoding=utf-8

" json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" jbuilder syntax highlighting
au BufNewFile,BufRead Brewfile set ft=sh

" syntax highlighting for Lo-dash template files (.tpl.html)
au BufRead,BufNewFile *.tpl.html set filetype=eruby.html

" syntax highlighting for *.md files
au BufRead,BufNewFile *.md set filetype=markdown

" configure plugins for writing with markdown
let g:pencil#wrapModeDefault = 'soft'

augroup pencil
  autocmd!
  autocmd FileType markdown     call pencil#init()
  autocmd FileType text         call pencil#init({'wrap': 'hard'})
augroup END

set showmatch " show matching brackets

" configure javascript libraries used for syntax highlighting
let g:used_javascript_libs = 'jquery,underscore,requirejs'

" set default indentation settings
set expandtab
set tabstop=2
set shiftwidth=2
set backspace=2
set autoindent
set smartindent
set nocindent

" use tabs in makefiles
au FileType make setlocal noexpandtab


" Search
" ------
set incsearch " highlight matches as we search
set hlsearch " keep search highlights after search
set ignorecase " ignore case when searching
set smartcase " ...but make it case-sensitive if not all lowercase


" Swap, backup, and undo
" ----------------------
set backupdir^=~/.vim/backups//
set undodir=~/.vim/undodir

" disable swap file
set noswapfile

set undofile " enables peristent undo (keeps history on file reload)
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload
