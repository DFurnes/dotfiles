set nocp  " we don't wanna be vi compatible.

" Plugins
" -----------------
call plug#begin('~/.vim/plugged')
  Plug 'airblade/vim-gitgutter' " git gutter
  Plug 'ConradIrwin/vim-bracketed-paste' " iterm2 paste support
  Plug 'HerringtonDarkholme/yats.vim' " TypeScript syntax
  Plug 'NLKNguyen/papercolor-theme' " pretty color scheme
  Plug 'Raimondi/delimitMate' " add matching quote, parens, brackets
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'docunext/closetag.vim' " auto-</tag>
  Plug 'editorconfig/editorconfig-vim'
  Plug 'gmarik/vundle' " package manager
  Plug 'henrik/vim-reveal-in-finder' " :Reveal
  Plug 'junegunn/fzf' " fuzzy-find
  Plug 'junegunn/fzf.vim' " fuzzy-find, plus
  Plug 'junegunn/goyo.vim' " markdown: no distraction mode
  Plug 'mattn/emmet-vim' " emmet!
  Plug 'reedes/vim-pencil' " markdown
  Plug 'scrooloose/nerdtree' " tree view
  Plug 'sheerun/vim-polyglot' " syntax highlighting
  Plug 'tpope/vim-commentary' " gcc, gcap
  Plug 'tpope/vim-eunuch' " :Delete, :Rename, :SudoWrite, etc.
  Plug 'tpope/vim-surround' " change parens
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'vim-scripts/AfterColors.vim' " allow customizing syntax highlighting
  Plug 'w0rp/ale' " linting

  if has('nvim')
    Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
    Plug 'roxma/LanguageServer-php-neovim',  {'do': 'composer install && composer run-script parse-stubs'}
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  endif
call plug#end()

" Appearance & color scheme
" -------------------------
syntax enable
set background=dark
colorscheme PaperColor

" Don't mess up MacVim background
if ! has('gui_running')
  let g:PaperColor_Theme_Options = {
        \   'theme': {
        \     'default': {
        \       'transparent_background': 1
        \     }
        \   }
        \ }
endif

" use mouse in terminal vim
set mouse=a

" use system clipboard for default copy-and-paste register
set clipboard=unnamed

" line numbers
set ruler " show line numbers
set relativenumber " relative line numbers
set number " shows current line as absolute line number (Vim 7.4+)
set cul " highlights current line

" open splits below/right of current area, like a sane person
set splitbelow
set splitright

" keep 5 lines above/below the cursor when scrolling
set scrolloff=5

" don't be annoying
set noerrorbells
set novisualbell

" show powerline all the time
set laststatus=2

" gui options
set guifont=Menlo:h12
set guioptions-=m
set guioptions-=t
set guioptions-=r
set guioptions-=e

" hide splash screen
set shortmess+=I

" Airline
let g:airline_theme = "powerlineish"
let g:airline_powerline_fonts = 0
let g:airline_symbols = {}
let g:airline_left_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'P'
let g:airline_symbols.paste = 'P'
let g:airline_symbols.paste = 'P'
let g:airline_symbols.whitespace = 'Ξ'

" Ale
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
highlight clear SignColumn

" Aliases
" -----------------
" Set leader to ',' since its easier to type
let mapleader = ","

" shortcut to get out of insert mode.
imap jj <Esc>

" shortcut for opening tab
nnoremap <silent> tt :tabnew<CR>

" shortcuts for creating splits
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" shortcuts to switch between splits
nnoremap sh <C-w>h
nnoremap sl <C-w>l
nnoremap sj <C-w>j
nnoremap sk <C-w>k

" shortcut to hide search highlights
nmap <leader>h :nohlsearch<cr>

" Quick file-switching via FZF
map <C-p> :Files!<cr>
map <C-o> :Recents!<cr>
command! -bang Recents call fzf#vim#history(fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
let g:fzf_history_dir = '~/.local/share/fzf-history'

" NERDTree
map <C-n> :call ToggleNERDTreeFind()<CR>

function! ToggleNERDTreeFind()
  if g:NERDTree.IsOpen()
    execute ':NERDTreeClose'
  else
    execute ':NERDTreeFind'
  endif
endfunction


" Code Completion
" ---------------
set omnifunc=syntaxcomplete#Complete

let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

" UltiSnips
let g:UltiSnipsExpandTrigger="<C-S>"
let g:UltiSnipsJumpForwardTrigger="<C-S>"
let g:UltiSnipsJumpBackwardTrigger="<C-D>"


" Delimitmate
" -----------

" let delimitmate expand carriage returns with correct indentation
let delimitMate_expand_cr=1


" Opening/closing files
" ---------------------

" Remember last location in file (except git commit prompt)
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g`\"" | endif

" automatically read a file that has changed on disk
set autoread


" Filetypes & syntax highlighting
" ----------------------------------
syntax on
filetype off
filetype indent on
filetype plugin on
set encoding=utf-8

" json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" jbuilder syntax highlighting
au BufNewFile,BufRead Brewfile set ft=sh

" syntax highlighting for Lo-dash template files (.tpl.html)
au BufRead,BufNewFile *.tpl.html set filetype=eruby.html
au BufRead,BufNewFile *.ejs set filetype=eruby.html

" python pep-8
augroup BufNewFile,BufRead *.py
  set tabstop=4
  set softtabstop=4
  set shiftwidth=4
  set textwidth=79
  set expandtab
  set autoindent
  set fileformat=unix
augroup END

" syntax highlighting for *.md files
au BufRead,BufNewFile *.md set filetype=markdown

" configure plugins for writing with markdown
let g:pencil#wrapModeDefault = 'soft'
let g:pencil#conceallevel = 0

augroup pencil
  autocmd!
  autocmd FileType markdown     call pencil#init()
  autocmd FileType text         call pencil#init({'wrap': 'hard'})
augroup END

set showmatch " show matching brackets

" configure javascript libraries used for syntax highlighting
let g:used_javascript_libs = 'jquery,underscore,requirejs'

" set default indentation settings
set expandtab
set tabstop=2
set shiftwidth=2
set backspace=2
set autoindent
set smartindent
set nocindent

" use tabs in makefiles
au FileType make setlocal noexpandtab


" Search
" ------
set incsearch " highlight matches as we search
set hlsearch " keep search highlights after search
set ignorecase " ignore case when searching
set smartcase " ...but make it case-sensitive if not all lowercase


" Swap, backup, and undo
" ----------------------
set backupdir^=~/.vim/backups//
set undodir=~/.vim/undodir

" disable swap file
set noswapfile

set undofile " enables peristent undo (keeps history on file reload)
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

" NeoVim
" ------

if has('nvim')
  " Required for operations modifying multiple buffers like rename.
  set hidden

  let g:LanguageClient_autoStart = 1
  let g:LanguageClient_serverCommands = {
        \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
        \ 'javascript.jsx': ['/usr/local/lib/node_modules/javascript-typescript-langserver/lib/language-server-stdio.js'],
        \ }

  " Automatically start PHP language server.
  autocmd FileType php LanguageClientStart

  nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
  nnoremap <leader>r :call LanguageClient_textDocument_rename()<CR>

  " deoplete
  let g:deoplete#enable_at_startup = 1
  inoremap <silent><expr> <Tab>
        \ pumvisible() ? "\<C-n>" :
        \ deoplete#mappings#manual_complete()
endif
